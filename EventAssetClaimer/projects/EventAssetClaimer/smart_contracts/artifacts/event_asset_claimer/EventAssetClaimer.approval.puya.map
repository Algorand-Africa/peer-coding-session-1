{
  "version": 3,
  "sources": [
    "/workspaces/peer-coding-session-1/EventAssetClaimer/projects/EventAssetClaimer/smart_contracts/event_asset_claimer/contract.algo.ts"
  ],
  "mappings": ";;;;;AAYA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;AA6BG;;AAAA;AAAA;AAAA;;AAAA;AA7BH;;;AAAA;AA6BG;;;AAAA;;AAzBA;;AAAA;AAAA;AAAA;;AAAA;AAJH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAIG;;;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAHA;;AAAA;AAAA;AAAA;;AAGD;;;AAQgB;;AAAA;;AAAU;;;;AAAjB;AAAP;AACc;;AAAA;;AAAoB;;AAA3B;AAAP;AACW;;AAAkB;;AAAtB;AAAP;AACA;;AAAA;AAEiB;AAMC;;;;;;;;AAFN;;;;;;;;;;;;;;;AAJK;;;;AAAA;;;AAAA;;;AASjB;AAGF;;;AAEqD;;AAA9B;;AAAA;;AAAA;AAC+B;;AAA3B;;AAAA;;AAAA;AACzB;AAAA;AACO;AAAP;AACW;;AAAJ;;AAAA;;AAAA;;AAAP;AAEA;AAGqB;;;;AADN;;;;;;;AAFf;;;;AAAA;;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0"
    },
    "5": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "7": {
      "op": "bz main_after_if_else@9",
      "stack_out": []
    },
    "10": {
      "op": "pushbytess 0xb8447b36 0x95413ec4 0x620508c0 // method \"createApplication()void\", method \"bootstrap(pay,string,uint64,string,string)uint64\", method \"claimAsset(uint64)void\"",
      "defined_out": [
        "Method(bootstrap(pay,string,uint64,string,string)uint64)",
        "Method(claimAsset(uint64)void)",
        "Method(createApplication()void)"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(bootstrap(pay,string,uint64,string,string)uint64)",
        "Method(claimAsset(uint64)void)"
      ]
    },
    "27": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bootstrap(pay,string,uint64,string,string)uint64)",
        "Method(claimAsset(uint64)void)",
        "Method(createApplication()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication()void)",
        "Method(bootstrap(pay,string,uint64,string,string)uint64)",
        "Method(claimAsset(uint64)void)",
        "tmp%2#0"
      ]
    },
    "30": {
      "op": "match main_createApplication_route@3 main_bootstrap_route@4 main_claimAsset_route@5",
      "stack_out": []
    },
    "38": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "39": {
      "op": "return",
      "stack_out": []
    },
    "40": {
      "block": "main_claimAsset_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "42": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "43": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "44": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "46": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "47": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "50": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "51": {
      "callsub": "smart_contracts/event_asset_claimer/contract.algo.ts::EventAssetClaimer.claimAsset",
      "op": "callsub claimAsset",
      "stack_out": []
    },
    "54": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "55": {
      "op": "return",
      "stack_out": []
    },
    "56": {
      "block": "main_bootstrap_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "58": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "59": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "62": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "63": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "65": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "1"
      ]
    },
    "66": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "67": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "68": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "70": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "71": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "72": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "73": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%10#0"
      ]
    },
    "76": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%11#0"
      ]
    },
    "79": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "82": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "86": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "89": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "92": {
      "op": "extract 2 0",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%16#0"
      ]
    },
    "95": {
      "callsub": "smart_contracts/event_asset_claimer/contract.algo.ts::EventAssetClaimer.bootstrap",
      "op": "callsub bootstrap",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "98": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "99": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "105": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "106": {
      "op": "concat",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "107": {
      "op": "log",
      "stack_out": []
    },
    "108": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "109": {
      "op": "return",
      "stack_out": []
    },
    "110": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "112": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "113": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "114": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "115": {
      "op": "return",
      "stack_out": []
    },
    "116": {
      "subroutine": "smart_contracts/event_asset_claimer/contract.algo.ts::EventAssetClaimer.bootstrap",
      "params": {
        "mbrTxn#0": "uint64",
        "ipfsUrl#0": "bytes",
        "numberOfUnits#0": "uint64",
        "assetName#0": "bytes",
        "assetUnitName#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 5 1"
    },
    "119": {
      "op": "frame_dig -5",
      "defined_out": [
        "mbrTxn#0 (copy)"
      ],
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "121": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "pushint 200000 // 200000",
      "defined_out": [
        "200000",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "200000"
      ]
    },
    "127": {
      "op": ">=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "128": {
      "error": "Minimum balance must be at least 0.2 algos",
      "op": "assert // Minimum balance must be at least 0.2 algos",
      "stack_out": []
    },
    "129": {
      "op": "frame_dig -5",
      "stack_out": [
        "mbrTxn#0 (copy)"
      ]
    },
    "131": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "133": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "135": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "136": {
      "op": "assert",
      "stack_out": []
    },
    "137": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "139": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "141": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "142": {
      "op": "assert",
      "stack_out": []
    },
    "143": {
      "op": "frame_dig -3",
      "defined_out": [
        "numberOfUnits#0 (copy)"
      ],
      "stack_out": [
        "numberOfUnits#0 (copy)"
      ]
    },
    "145": {
      "op": "assert",
      "stack_out": []
    },
    "146": {
      "op": "itxn_begin"
    },
    "147": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "149": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "151": {
      "op": "frame_dig -3",
      "stack_out": [
        "numberOfUnits#0 (copy)"
      ]
    },
    "153": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "155": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "156": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "158": {
      "op": "frame_dig -4",
      "defined_out": [
        "ipfsUrl#0 (copy)"
      ],
      "stack_out": [
        "ipfsUrl#0 (copy)"
      ]
    },
    "160": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": []
    },
    "162": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetUnitName#0 (copy)"
      ],
      "stack_out": [
        "assetUnitName#0 (copy)"
      ]
    },
    "164": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "166": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetName#0 (copy)"
      ],
      "stack_out": [
        "assetName#0 (copy)"
      ]
    },
    "168": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "170": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3"
      ],
      "stack_out": [
        "3"
      ]
    },
    "172": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "174": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "175": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "177": {
      "op": "itxn_submit"
    },
    "178": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "response.CreatedAssetID#0"
      ],
      "stack_out": [
        "response.CreatedAssetID#0"
      ]
    },
    "180": {
      "retsub": true,
      "op": "retsub"
    },
    "181": {
      "subroutine": "smart_contracts/event_asset_claimer/contract.algo.ts::EventAssetClaimer.claimAsset",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "claimAsset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "184": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "186": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "assetId#0 (copy)"
      ]
    },
    "188": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%0#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "check%0#0"
      ]
    },
    "190": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetBalance#0"
      ]
    },
    "191": {
      "op": "txn Sender",
      "defined_out": [
        "assetBalance#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "tmp%1#0"
      ]
    },
    "193": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetBalance#0",
        "tmp%1#0",
        "assetId#0 (copy)"
      ]
    },
    "195": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "assetBalance#0",
        "check%1#0",
        "userAssetBalance#0"
      ],
      "stack_out": [
        "assetBalance#0",
        "userAssetBalance#0",
        "check%1#0"
      ]
    },
    "197": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "assetBalance#0",
        "userAssetBalance#0"
      ]
    },
    "198": {
      "op": "swap",
      "stack_out": [
        "userAssetBalance#0",
        "assetBalance#0"
      ]
    },
    "199": {
      "op": "assert",
      "stack_out": [
        "userAssetBalance#0"
      ]
    },
    "200": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "201": {
      "op": "assert",
      "stack_out": []
    },
    "202": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "204": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "assetId#0 (copy)"
      ]
    },
    "206": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "208": {
      "op": "bury 1",
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "210": {
      "op": "assert",
      "stack_out": []
    },
    "211": {
      "op": "itxn_begin"
    },
    "212": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "214": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "216": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "217": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "219": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetId#0 (copy)"
      ]
    },
    "221": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "223": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "225": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "227": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "228": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "230": {
      "op": "itxn_submit"
    },
    "231": {
      "retsub": true,
      "op": "retsub"
    }
  }
}