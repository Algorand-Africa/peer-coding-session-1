#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 1 0
    // smart_contracts/event_asset_claimer/contract.algo.ts:13
    // export class EventAssetClaimer extends Contract {
    txn NumAppArgs
    bz main_after_if_else@9
    pushbytess 0xb8447b36 0x95413ec4 0x620508c0 // method "createApplication()void", method "bootstrap(pay,string,uint64,string,string)uint64", method "claimAsset(uint64)void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_bootstrap_route@4 main_claimAsset_route@5

main_after_if_else@9:
    // smart_contracts/event_asset_claimer/contract.algo.ts:13
    // export class EventAssetClaimer extends Contract {
    intc_1 // 0
    return

main_claimAsset_route@5:
    // smart_contracts/event_asset_claimer/contract.algo.ts:41
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/event_asset_claimer/contract.algo.ts:13
    // export class EventAssetClaimer extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/event_asset_claimer/contract.algo.ts:41
    // @abimethod()
    callsub claimAsset
    intc_0 // 1
    return

main_bootstrap_route@4:
    // smart_contracts/event_asset_claimer/contract.algo.ts:17
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/event_asset_claimer/contract.algo.ts:13
    // export class EventAssetClaimer extends Contract {
    txn GroupIndex
    intc_0 // 1
    -
    dup
    gtxns TypeEnum
    intc_0 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    extract 2 0
    // smart_contracts/event_asset_claimer/contract.algo.ts:17
    // @abimethod()
    callsub bootstrap
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_createApplication_route@3:
    // smart_contracts/event_asset_claimer/contract.algo.ts:14
    // @abimethod({ onCreate: 'allow' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    intc_0 // 1
    return


// smart_contracts/event_asset_claimer/contract.algo.ts::EventAssetClaimer.bootstrap(mbrTxn: uint64, ipfsUrl: bytes, numberOfUnits: uint64, assetName: bytes, assetUnitName: bytes) -> uint64:
bootstrap:
    // smart_contracts/event_asset_claimer/contract.algo.ts:17-24
    // @abimethod()
    // public bootstrap(
    //   mbrTxn: gtxn.PaymentTxn,
    //   ipfsUrl: string,
    //   numberOfUnits: uint64,
    //   assetName: string,
    //   assetUnitName: string,
    // ): uint64 {
    proto 5 1
    // smart_contracts/event_asset_claimer/contract.algo.ts:25
    // assert(mbrTxn.amount >= 200_000, 'Minimum balance must be at least 0.2 algos');
    frame_dig -5
    gtxns Amount
    pushint 200000 // 200000
    >=
    assert // Minimum balance must be at least 0.2 algos
    // smart_contracts/event_asset_claimer/contract.algo.ts:26
    // assert(mbrTxn.receiver === Global.currentApplicationAddress);
    frame_dig -5
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/event_asset_claimer/contract.algo.ts:27
    // assert(numberOfUnits > 0);
    frame_dig -3
    assert
    // smart_contracts/event_asset_claimer/contract.algo.ts:29-36
    // const response = itxn.assetConfig({
    //   assetName,
    //   unitName: assetUnitName,
    //   url: ipfsUrl,
    //   decimals: 0,
    //   total: numberOfUnits,
    //   manager: Global.currentApplicationAddress,
    // }).submit();
    itxn_begin
    // smart_contracts/event_asset_claimer/contract.algo.ts:35
    // manager: Global.currentApplicationAddress,
    global CurrentApplicationAddress
    itxn_field ConfigAssetManager
    frame_dig -3
    itxn_field ConfigAssetTotal
    // smart_contracts/event_asset_claimer/contract.algo.ts:33
    // decimals: 0,
    intc_1 // 0
    itxn_field ConfigAssetDecimals
    frame_dig -4
    itxn_field ConfigAssetURL
    frame_dig -1
    itxn_field ConfigAssetUnitName
    frame_dig -2
    itxn_field ConfigAssetName
    // smart_contracts/event_asset_claimer/contract.algo.ts:29-36
    // const response = itxn.assetConfig({
    //   assetName,
    //   unitName: assetUnitName,
    //   url: ipfsUrl,
    //   decimals: 0,
    //   total: numberOfUnits,
    //   manager: Global.currentApplicationAddress,
    // }).submit();
    pushint 3 // 3
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/event_asset_claimer/contract.algo.ts:38
    // return response.createdAsset.id
    retsub


// smart_contracts/event_asset_claimer/contract.algo.ts::EventAssetClaimer.claimAsset(assetId: uint64) -> void:
claimAsset:
    // smart_contracts/event_asset_claimer/contract.algo.ts:41-42
    // @abimethod()
    // public claimAsset(assetId: uint64): void {
    proto 1 0
    // smart_contracts/event_asset_claimer/contract.algo.ts:43
    // const assetBalance = Asset(assetId).balance(Global.currentApplicationAddress);
    global CurrentApplicationAddress
    frame_dig -1
    asset_holding_get AssetBalance
    assert // account opted into asset
    // smart_contracts/event_asset_claimer/contract.algo.ts:44
    // const userAssetBalance = Asset(assetId).balance(Txn.sender);
    txn Sender
    frame_dig -1
    asset_holding_get AssetBalance
    assert // account opted into asset
    // smart_contracts/event_asset_claimer/contract.algo.ts:45
    // assert(assetBalance > 0);
    swap
    assert
    // smart_contracts/event_asset_claimer/contract.algo.ts:46
    // assert(userAssetBalance === 0);
    !
    assert
    // smart_contracts/event_asset_claimer/contract.algo.ts:47
    // assert(Txn.sender.isOptedIn(Asset(assetId)));
    txn Sender
    frame_dig -1
    asset_holding_get AssetBalance
    bury 1
    assert
    // smart_contracts/event_asset_claimer/contract.algo.ts:49-53
    // itxn.assetTransfer({
    //   xferAsset: assetId,
    //   assetAmount: 1,
    //   assetReceiver: Txn.sender,
    // }).submit();
    itxn_begin
    // smart_contracts/event_asset_claimer/contract.algo.ts:52
    // assetReceiver: Txn.sender,
    txn Sender
    itxn_field AssetReceiver
    // smart_contracts/event_asset_claimer/contract.algo.ts:51
    // assetAmount: 1,
    intc_0 // 1
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    // smart_contracts/event_asset_claimer/contract.algo.ts:49-53
    // itxn.assetTransfer({
    //   xferAsset: assetId,
    //   assetAmount: 1,
    //   assetReceiver: Txn.sender,
    // }).submit();
    pushint 4 // 4
    itxn_field TypeEnum
    intc_1 // 0
    itxn_field Fee
    itxn_submit
    retsub
