#pragma version 10
intcblock 0 1
bytecblock 0x6173736574

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0
	retsub

// createAsset()void
*abi_route_createAsset:
	// execute createAsset()void
	callsub createAsset
	intc 1 // 1
	return

// createAsset(): void
//
// This creates the asset that can be claimed
// once by any address.
createAsset:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// contracts/AssetCreator.algo.ts:13
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/AssetCreator.algo.ts:14
	// assert(!this.asset.exists)
	txna Applications 0
	bytec 0 //  "asset"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/AssetCreator.algo.ts:16
	// newAsset = sendAssetCreation({
	//       configAssetName: 'ASC',
	//       configAssetTotal: 10000,
	//       configAssetDecimals: 0,
	//       configAssetFreeze: this.app.address,
	//       configAssetManager: this.app.address,
	//     })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/AssetCreator.algo.ts:17
	// configAssetName: 'ASC'
	pushbytes 0x415343 // "ASC"
	itxn_field ConfigAssetName

	// contracts/AssetCreator.algo.ts:18
	// configAssetTotal: 10000
	pushint 10000
	itxn_field ConfigAssetTotal

	// contracts/AssetCreator.algo.ts:19
	// configAssetDecimals: 0
	intc 0 // 0
	itxn_field ConfigAssetDecimals

	// contracts/AssetCreator.algo.ts:20
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// contracts/AssetCreator.algo.ts:21
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // newAsset: uint64

	// contracts/AssetCreator.algo.ts:24
	// this.asset.value = newAsset
	bytec 0 //  "asset"
	frame_dig 0 // newAsset: uint64
	app_global_put
	retsub

// claimAsset()void
*abi_route_claimAsset:
	// execute claimAsset()void
	callsub claimAsset
	intc 1 // 1
	return

// claimAsset(): void
//
// This method transfers and freezes one unit of the
// asset to the account that calls it.
claimAsset:
	proto 0 0

	// contracts/AssetCreator.algo.ts:32
	// assert(this.txn.sender.assetBalance(this.asset.value) === 0)
	txn Sender
	bytec 0 //  "asset"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 0 // 0
	==
	assert

	// contracts/AssetCreator.algo.ts:34
	// sendAssetTransfer({
	//       assetAmount: 1,
	//       assetReceiver: this.txn.sender,
	//       xferAsset: this.asset.value,
	//     })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts/AssetCreator.algo.ts:35
	// assetAmount: 1
	intc 1 // 1
	itxn_field AssetAmount

	// contracts/AssetCreator.algo.ts:36
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/AssetCreator.algo.ts:37
	// xferAsset: this.asset.value
	bytec 0 //  "asset"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/AssetCreator.algo.ts:40
	// sendAssetFreeze({
	//       freezeAsset: this.asset.value,
	//       freezeAssetFrozen: true,
	//       freezeAssetAccount: this.txn.sender,
	//     })
	itxn_begin
	pushint 5 // afrz
	itxn_field TypeEnum

	// contracts/AssetCreator.algo.ts:41
	// freezeAsset: this.asset.value
	bytec 0 //  "asset"
	app_global_get
	itxn_field FreezeAsset

	// contracts/AssetCreator.algo.ts:42
	// freezeAssetFrozen: true
	intc 1 // 1
	itxn_field FreezeAssetFrozen

	// contracts/AssetCreator.algo.ts:43
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa65aabfe // method "createAsset()void"
	pushbytes 0xf557a038 // method "claimAsset()void"
	txna ApplicationArgs 0
	match *abi_route_createAsset *abi_route_claimAsset

	// this contract does not implement the given ABI method for call NoOp
	err