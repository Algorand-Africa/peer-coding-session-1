/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AssetCreator","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createAsset","desc":"This creates the asset that can be claimed\nonce by any address.","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"claimAsset","desc":"This method transfers and freezes one unit of the\nasset to the account that calls it.","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"asset":{"key":"YXNzZXQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/AssetCreator.algo.ts:3","pc":[0]},{"teal":2,"source":"contracts/AssetCreator.algo.ts:3","pc":[1,2,3,4]},{"teal":3,"source":"contracts/AssetCreator.algo.ts:3","pc":[5,6,7,8,9,10,11,12]},{"teal":15,"source":"contracts/AssetCreator.algo.ts:3","pc":[13,14]},{"teal":16,"source":"contracts/AssetCreator.algo.ts:3","pc":[15]},{"teal":17,"source":"contracts/AssetCreator.algo.ts:3","pc":[16,17]},{"teal":18,"source":"contracts/AssetCreator.algo.ts:3","pc":[18]},{"teal":19,"source":"contracts/AssetCreator.algo.ts:3","pc":[19,20]},{"teal":20,"source":"contracts/AssetCreator.algo.ts:3","pc":[21]},{"teal":21,"source":"contracts/AssetCreator.algo.ts:3","pc":[22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]},{"teal":25,"source":"contracts/AssetCreator.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[48]},{"teal":30,"source":"contracts/AssetCreator.algo.ts:6","pc":[49,50,51]},{"teal":31,"source":"contracts/AssetCreator.algo.ts:6","pc":[52]},{"teal":32,"source":"contracts/AssetCreator.algo.ts:6","pc":[53]},{"teal":36,"source":"contracts/AssetCreator.algo.ts:6","pc":[54,55,56]},{"teal":37,"source":"contracts/AssetCreator.algo.ts:6","pc":[57]},{"teal":42,"source":"contracts/AssetCreator.algo.ts:12","pc":[58,59,60]},{"teal":43,"source":"contracts/AssetCreator.algo.ts:12","pc":[61]},{"teal":44,"source":"contracts/AssetCreator.algo.ts:12","pc":[62]},{"teal":51,"source":"contracts/AssetCreator.algo.ts:12","pc":[63,64,65]},{"teal":54,"source":"contracts/AssetCreator.algo.ts:12","pc":[66,67]},{"teal":58,"source":"contracts/AssetCreator.algo.ts:13","pc":[68,69]},{"teal":59,"source":"contracts/AssetCreator.algo.ts:13","pc":[70,71,72]},{"teal":60,"source":"contracts/AssetCreator.algo.ts:13","pc":[73,74]},{"teal":61,"source":"contracts/AssetCreator.algo.ts:13","pc":[75]},{"teal":62,"source":"contracts/AssetCreator.algo.ts:13","pc":[76]},{"teal":63,"source":"contracts/AssetCreator.algo.ts:13","pc":[77]},{"teal":67,"source":"contracts/AssetCreator.algo.ts:14","pc":[78,79,80]},{"teal":68,"source":"contracts/AssetCreator.algo.ts:14","pc":[81]},{"teal":69,"source":"contracts/AssetCreator.algo.ts:14","pc":[82]},{"teal":70,"source":"contracts/AssetCreator.algo.ts:14","pc":[83]},{"teal":71,"source":"contracts/AssetCreator.algo.ts:14","pc":[84]},{"teal":72,"source":"contracts/AssetCreator.algo.ts:14","pc":[85]},{"teal":73,"source":"contracts/AssetCreator.algo.ts:14","pc":[86]},{"teal":83,"source":"contracts/AssetCreator.algo.ts:16","pc":[87]},{"teal":84,"source":"contracts/AssetCreator.algo.ts:16","pc":[88,89]},{"teal":85,"source":"contracts/AssetCreator.algo.ts:16","pc":[90,91]},{"teal":89,"source":"contracts/AssetCreator.algo.ts:17","pc":[92,93,94,95,96]},{"teal":90,"source":"contracts/AssetCreator.algo.ts:17","pc":[97,98]},{"teal":94,"source":"contracts/AssetCreator.algo.ts:18","pc":[99,100,101]},{"teal":95,"source":"contracts/AssetCreator.algo.ts:18","pc":[102,103]},{"teal":99,"source":"contracts/AssetCreator.algo.ts:19","pc":[104]},{"teal":100,"source":"contracts/AssetCreator.algo.ts:19","pc":[105,106]},{"teal":104,"source":"contracts/AssetCreator.algo.ts:20","pc":[107,108]},{"teal":105,"source":"contracts/AssetCreator.algo.ts:20","pc":[109,110]},{"teal":109,"source":"contracts/AssetCreator.algo.ts:21","pc":[111,112]},{"teal":110,"source":"contracts/AssetCreator.algo.ts:21","pc":[113,114]},{"teal":113,"source":"contracts/AssetCreator.algo.ts:16","pc":[115]},{"teal":114,"source":"contracts/AssetCreator.algo.ts:16","pc":[116,117]},{"teal":117,"source":"contracts/AssetCreator.algo.ts:16","pc":[118]},{"teal":118,"source":"contracts/AssetCreator.algo.ts:16","pc":[119,120]},{"teal":119,"source":"contracts/AssetCreator.algo.ts:16","pc":[121,122]},{"teal":123,"source":"contracts/AssetCreator.algo.ts:24","pc":[123]},{"teal":124,"source":"contracts/AssetCreator.algo.ts:24","pc":[124,125]},{"teal":125,"source":"contracts/AssetCreator.algo.ts:24","pc":[126]},{"teal":126,"source":"contracts/AssetCreator.algo.ts:12","pc":[127]},{"teal":131,"source":"contracts/AssetCreator.algo.ts:31","pc":[128,129,130]},{"teal":132,"source":"contracts/AssetCreator.algo.ts:31","pc":[131]},{"teal":133,"source":"contracts/AssetCreator.algo.ts:31","pc":[132]},{"teal":140,"source":"contracts/AssetCreator.algo.ts:31","pc":[133,134,135]},{"teal":144,"source":"contracts/AssetCreator.algo.ts:32","pc":[136,137]},{"teal":145,"source":"contracts/AssetCreator.algo.ts:32","pc":[138]},{"teal":146,"source":"contracts/AssetCreator.algo.ts:32","pc":[139]},{"teal":147,"source":"contracts/AssetCreator.algo.ts:32","pc":[140,141]},{"teal":148,"source":"contracts/AssetCreator.algo.ts:32","pc":[142]},{"teal":149,"source":"contracts/AssetCreator.algo.ts:32","pc":[143]},{"teal":150,"source":"contracts/AssetCreator.algo.ts:32","pc":[144]},{"teal":151,"source":"contracts/AssetCreator.algo.ts:32","pc":[145]},{"teal":159,"source":"contracts/AssetCreator.algo.ts:34","pc":[146]},{"teal":160,"source":"contracts/AssetCreator.algo.ts:34","pc":[147,148]},{"teal":161,"source":"contracts/AssetCreator.algo.ts:34","pc":[149,150]},{"teal":165,"source":"contracts/AssetCreator.algo.ts:35","pc":[151]},{"teal":166,"source":"contracts/AssetCreator.algo.ts:35","pc":[152,153]},{"teal":170,"source":"contracts/AssetCreator.algo.ts:36","pc":[154,155]},{"teal":171,"source":"contracts/AssetCreator.algo.ts:36","pc":[156,157]},{"teal":175,"source":"contracts/AssetCreator.algo.ts:37","pc":[158]},{"teal":176,"source":"contracts/AssetCreator.algo.ts:37","pc":[159]},{"teal":177,"source":"contracts/AssetCreator.algo.ts:37","pc":[160,161]},{"teal":180,"source":"contracts/AssetCreator.algo.ts:34","pc":[162]},{"teal":181,"source":"contracts/AssetCreator.algo.ts:34","pc":[163,164]},{"teal":184,"source":"contracts/AssetCreator.algo.ts:34","pc":[165]},{"teal":192,"source":"contracts/AssetCreator.algo.ts:40","pc":[166]},{"teal":193,"source":"contracts/AssetCreator.algo.ts:40","pc":[167,168]},{"teal":194,"source":"contracts/AssetCreator.algo.ts:40","pc":[169,170]},{"teal":198,"source":"contracts/AssetCreator.algo.ts:41","pc":[171]},{"teal":199,"source":"contracts/AssetCreator.algo.ts:41","pc":[172]},{"teal":200,"source":"contracts/AssetCreator.algo.ts:41","pc":[173,174]},{"teal":204,"source":"contracts/AssetCreator.algo.ts:42","pc":[175]},{"teal":205,"source":"contracts/AssetCreator.algo.ts:42","pc":[176,177]},{"teal":209,"source":"contracts/AssetCreator.algo.ts:43","pc":[178,179]},{"teal":210,"source":"contracts/AssetCreator.algo.ts:43","pc":[180,181]},{"teal":213,"source":"contracts/AssetCreator.algo.ts:40","pc":[182]},{"teal":214,"source":"contracts/AssetCreator.algo.ts:40","pc":[183,184]},{"teal":217,"source":"contracts/AssetCreator.algo.ts:40","pc":[185]},{"teal":218,"source":"contracts/AssetCreator.algo.ts:31","pc":[186]},{"teal":221,"source":"contracts/AssetCreator.algo.ts:3","pc":[187,188,189,190,191,192]},{"teal":222,"source":"contracts/AssetCreator.algo.ts:3","pc":[193,194,195]},{"teal":223,"source":"contracts/AssetCreator.algo.ts:3","pc":[196,197,198,199]},{"teal":226,"source":"contracts/AssetCreator.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[200]},{"teal":229,"source":"contracts/AssetCreator.algo.ts:3","pc":[201,202,203,204,205,206]},{"teal":230,"source":"contracts/AssetCreator.algo.ts:3","pc":[207,208,209,210,211,212]},{"teal":231,"source":"contracts/AssetCreator.algo.ts:3","pc":[213,214,215]},{"teal":232,"source":"contracts/AssetCreator.algo.ts:3","pc":[216,217,218,219,220,221]},{"teal":235,"source":"contracts/AssetCreator.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[222]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEKYnl0ZWNibG9jayAweDYxNzM3MzY1NzQKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjIKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24oKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoJcmV0c3ViCgovLyBjcmVhdGVBc3NldCgpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFzc2V0OgoJLy8gZXhlY3V0ZSBjcmVhdGVBc3NldCgpdm9pZAoJY2FsbHN1YiBjcmVhdGVBc3NldAoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXNzZXQoKTogdm9pZAovLwovLyBUaGlzIGNyZWF0ZXMgdGhlIGFzc2V0IHRoYXQgY2FuIGJlIGNsYWltZWQKLy8gb25jZSBieSBhbnkgYWRkcmVzcy4KY3JlYXRlQXNzZXQ6Cglwcm90byAwIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJcHVzaGJ5dGVzIDB4CgoJLy8gY29udHJhY3RzL0Fzc2V0Q3JlYXRvci5hbGdvLnRzOjEzCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFwcC5jcmVhdG9yKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0Fzc2V0Q3JlYXRvci5hbGdvLnRzOjE0CgkvLyBhc3NlcnQoIXRoaXMuYXNzZXQuZXhpc3RzKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZWMgMCAvLyAgImFzc2V0IgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0Fzc2V0Q3JlYXRvci5hbGdvLnRzOjE2CgkvLyBuZXdBc3NldCA9IHNlbmRBc3NldENyZWF0aW9uKHsKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TmFtZTogJ0FTQycsCgkvLyAgICAgICBjb25maWdBc3NldFRvdGFsOiAxMDAwMCwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0RGVjaW1hbHM6IDAsCgkvLyAgICAgICBjb25maWdBc3NldEZyZWV6ZTogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TWFuYWdlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJcHVzaGludCAzIC8vIGFjZmcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6MTcKCS8vIGNvbmZpZ0Fzc2V0TmFtZTogJ0FTQycKCXB1c2hieXRlcyAweDQxNTM0MyAvLyAiQVNDIgoJaXR4bl9maWVsZCBDb25maWdBc3NldE5hbWUKCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6MTgKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IDEwMDAwCglwdXNoaW50IDEwMDAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6MTkKCS8vIGNvbmZpZ0Fzc2V0RGVjaW1hbHM6IDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6MjAKCS8vIGNvbmZpZ0Fzc2V0RnJlZXplOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldEZyZWV6ZQoKCS8vIGNvbnRyYWN0cy9Bc3NldENyZWF0b3IuYWxnby50czoyMQoJLy8gY29uZmlnQXNzZXRNYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBDb25maWdBc3NldE1hbmFnZXIKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIENyZWF0ZWRBc3NldElECglmcmFtZV9idXJ5IDAgLy8gbmV3QXNzZXQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0cy9Bc3NldENyZWF0b3IuYWxnby50czoyNAoJLy8gdGhpcy5hc3NldC52YWx1ZSA9IG5ld0Fzc2V0CglieXRlYyAwIC8vICAiYXNzZXQiCglmcmFtZV9kaWcgMCAvLyBuZXdBc3NldDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjbGFpbUFzc2V0KCl2b2lkCiphYmlfcm91dGVfY2xhaW1Bc3NldDoKCS8vIGV4ZWN1dGUgY2xhaW1Bc3NldCgpdm9pZAoJY2FsbHN1YiBjbGFpbUFzc2V0CglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBjbGFpbUFzc2V0KCk6IHZvaWQKLy8KLy8gVGhpcyBtZXRob2QgdHJhbnNmZXJzIGFuZCBmcmVlemVzIG9uZSB1bml0IG9mIHRoZQovLyBhc3NldCB0byB0aGUgYWNjb3VudCB0aGF0IGNhbGxzIGl0LgpjbGFpbUFzc2V0OgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzL0Fzc2V0Q3JlYXRvci5hbGdvLnRzOjMyCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyLmFzc2V0QmFsYW5jZSh0aGlzLmFzc2V0LnZhbHVlKSA9PT0gMCkKCXR4biBTZW5kZXIKCWJ5dGVjIDAgLy8gICJhc3NldCIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXBvcAoJaW50YyAwIC8vIDAKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6MzQKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIGFzc2V0QW1vdW50OiAxLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLmFzc2V0LnZhbHVlLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglwdXNoaW50IDQgLy8gYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6MzUKCS8vIGFzc2V0QW1vdW50OiAxCglpbnRjIDEgLy8gMQoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9Bc3NldENyZWF0b3IuYWxnby50czozNgoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6MzcKCS8vIHhmZXJBc3NldDogdGhpcy5hc3NldC52YWx1ZQoJYnl0ZWMgMCAvLyAgImFzc2V0IgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0cy9Bc3NldENyZWF0b3IuYWxnby50czo0MAoJLy8gc2VuZEFzc2V0RnJlZXplKHsKCS8vICAgICAgIGZyZWV6ZUFzc2V0OiB0aGlzLmFzc2V0LnZhbHVlLAoJLy8gICAgICAgZnJlZXplQXNzZXRGcm96ZW46IHRydWUsCgkvLyAgICAgICBmcmVlemVBc3NldEFjY291bnQ6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJcHVzaGludCA1IC8vIGFmcnoKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQXNzZXRDcmVhdG9yLmFsZ28udHM6NDEKCS8vIGZyZWV6ZUFzc2V0OiB0aGlzLmFzc2V0LnZhbHVlCglieXRlYyAwIC8vICAiYXNzZXQiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBGcmVlemVBc3NldAoKCS8vIGNvbnRyYWN0cy9Bc3NldENyZWF0b3IuYWxnby50czo0MgoJLy8gZnJlZXplQXNzZXRGcm96ZW46IHRydWUKCWludGMgMSAvLyAxCglpdHhuX2ZpZWxkIEZyZWV6ZUFzc2V0RnJvemVuCgoJLy8gY29udHJhY3RzL0Fzc2V0Q3JlYXRvci5hbGdvLnRzOjQzCgkvLyBmcmVlemVBc3NldEFjY291bnQ6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBGcmVlemVBc3NldEFjY291bnQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhhNjVhYWJmZSAvLyBtZXRob2QgImNyZWF0ZUFzc2V0KCl2b2lkIgoJcHVzaGJ5dGVzIDB4ZjU1N2EwMzggLy8gbWV0aG9kICJjbGFpbUFzc2V0KCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBc3NldCAqYWJpX3JvdXRlX2NsYWltQXNzZXQKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAAEmAQVhc3NldDEYFIEGCzEZCI0MAJkAAAAAAAAAAAAAAIsAAAAAAAAAAAAAAIgAAiNDigAAiYgAAiNDigAAgAAxADYyAHIHSBJENjIAKGVMSBREsYEDshCAA0FTQ7ImgZBOsiIisiMyCrIrMgqyKSKyAbO0PIwAKIsAZ4mIAAIjQ4oAADEAKGRwAEgiEkSxgQSyECOyEjEAshQoZLIRIrIBs7GBBbIQKGSyLSOyLzEAsi4isgGziYAEuER7NjYaAI4B/2kAgASmWqv+gAT1V6A4NhoAjgL/XP+iAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AssetCreator contract
 */
export type AssetCreatorArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createAsset()void': Record<string, never>
    'claimAsset()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createAsset()void': []
    'claimAsset()void': []
  }
}

/**
 * The return type for each method
 */
export type AssetCreatorReturns = {
  'createApplication()void': void
  'createAsset()void': void
  'claimAsset()void': void
}

/**
 * Defines the types of available calls and state of the AssetCreator smart contract.
 */
export type AssetCreatorTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: AssetCreatorArgs['obj']['createApplication()void']
      argsTuple: AssetCreatorArgs['tuple']['createApplication()void']
      returns: AssetCreatorReturns['createApplication()void']
    }>
    & Record<'createAsset()void' | 'createAsset', {
      argsObj: AssetCreatorArgs['obj']['createAsset()void']
      argsTuple: AssetCreatorArgs['tuple']['createAsset()void']
      returns: AssetCreatorReturns['createAsset()void']
    }>
    & Record<'claimAsset()void' | 'claimAsset', {
      argsObj: AssetCreatorArgs['obj']['claimAsset()void']
      argsTuple: AssetCreatorArgs['tuple']['claimAsset()void']
      returns: AssetCreatorReturns['claimAsset()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        asset: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AssetCreatorSignatures = keyof AssetCreatorTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AssetCreatorNonVoidMethodSignatures = keyof AssetCreatorTypes['methods'] extends infer T ? T extends keyof AssetCreatorTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AssetCreator smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AssetCreatorSignatures> = AssetCreatorTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AssetCreator smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AssetCreatorSignatures> = AssetCreatorTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AssetCreatorTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AssetCreatorCreateCallParams =
  | Expand<CallParams<AssetCreatorArgs['obj']['createApplication()void'] | AssetCreatorArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AssetCreatorArgs['obj']['createApplication()void'] | AssetCreatorArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AssetCreatorDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AssetCreatorCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AssetCreator smart contract
 */
export abstract class AssetCreatorParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AssetCreatorCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return AssetCreatorParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AssetCreator smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AssetCreatorArgs['obj']['createApplication()void'] | AssetCreatorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createAsset()void ABI method
   *
  * This creates the asset that can be claimed
  once by any address.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createAsset(params: CallParams<AssetCreatorArgs['obj']['createAsset()void'] | AssetCreatorArgs['tuple']['createAsset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createAsset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the claimAsset()void ABI method
   *
  * This method transfers and freezes one unit of the
  asset to the account that calls it.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimAsset(params: CallParams<AssetCreatorArgs['obj']['claimAsset()void'] | AssetCreatorArgs['tuple']['claimAsset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimAsset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AssetCreator smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AssetCreatorFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AssetCreatorFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AssetCreatorClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AssetCreatorClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AssetCreator smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AssetCreatorDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AssetCreatorParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AssetCreatorCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AssetCreatorClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetCreator smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AssetCreatorArgs['obj']['createApplication()void'] | AssetCreatorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(AssetCreatorParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetCreator smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AssetCreatorArgs['obj']['createApplication()void'] | AssetCreatorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(AssetCreatorParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetCreator smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AssetCreatorArgs['obj']['createApplication()void'] | AssetCreatorArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(AssetCreatorParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AssetCreatorReturns['createApplication()void']) }, appClient: new AssetCreatorClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AssetCreator smart contract
 */
export class AssetCreatorClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AssetCreatorClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AssetCreator app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AssetCreatorClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AssetCreatorNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AssetCreatorClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AssetCreatorClient> {
    return new AssetCreatorClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AssetCreatorClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AssetCreatorClient> {
    return new AssetCreatorClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AssetCreator smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetCreator smart contract using the `createAsset()void` ABI method.
     *
    * This creates the asset that can be claimed
    once by any address.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createAsset: (params: CallParams<AssetCreatorArgs['obj']['createAsset()void'] | AssetCreatorArgs['tuple']['createAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AssetCreatorParamsFactory.createAsset(params))
    },

    /**
     * Makes a call to the AssetCreator smart contract using the `claimAsset()void` ABI method.
     *
    * This method transfers and freezes one unit of the
    asset to the account that calls it.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimAsset: (params: CallParams<AssetCreatorArgs['obj']['claimAsset()void'] | AssetCreatorArgs['tuple']['claimAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AssetCreatorParamsFactory.claimAsset(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AssetCreator smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetCreator smart contract using the `createAsset()void` ABI method.
     *
    * This creates the asset that can be claimed
    once by any address.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createAsset: (params: CallParams<AssetCreatorArgs['obj']['createAsset()void'] | AssetCreatorArgs['tuple']['createAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AssetCreatorParamsFactory.createAsset(params))
    },

    /**
     * Makes a call to the AssetCreator smart contract using the `claimAsset()void` ABI method.
     *
    * This method transfers and freezes one unit of the
    asset to the account that calls it.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimAsset: (params: CallParams<AssetCreatorArgs['obj']['claimAsset()void'] | AssetCreatorArgs['tuple']['claimAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AssetCreatorParamsFactory.claimAsset(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AssetCreator smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetCreator smart contract using the `createAsset()void` ABI method.
     *
    * This creates the asset that can be claimed
    once by any address.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createAsset: async (params: CallParams<AssetCreatorArgs['obj']['createAsset()void'] | AssetCreatorArgs['tuple']['createAsset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AssetCreatorParamsFactory.createAsset(params))
      return {...result, return: result.return as unknown as (undefined | AssetCreatorReturns['createAsset()void'])}
    },

    /**
     * Makes a call to the AssetCreator smart contract using the `claimAsset()void` ABI method.
     *
    * This method transfers and freezes one unit of the
    asset to the account that calls it.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimAsset: async (params: CallParams<AssetCreatorArgs['obj']['claimAsset()void'] | AssetCreatorArgs['tuple']['claimAsset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AssetCreatorParamsFactory.claimAsset(params))
      return {...result, return: result.return as unknown as (undefined | AssetCreatorReturns['claimAsset()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AssetCreatorClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AssetCreator app
   */
  state = {
    /**
     * Methods to access global state for the current AssetCreator app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          asset: result.asset,
        }
      },
      /**
       * Get the current value of the asset key in global state
       */
      asset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset")) as bigint | undefined },
    },
  }

  public newGroup(): AssetCreatorComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createAsset()void method call against the AssetCreator contract
       */
      createAsset(params: CallParams<AssetCreatorArgs['obj']['createAsset()void'] | AssetCreatorArgs['tuple']['createAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimAsset()void method call against the AssetCreator contract
       */
      claimAsset(params: CallParams<AssetCreatorArgs['obj']['claimAsset()void'] | AssetCreatorArgs['tuple']['claimAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AssetCreator contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AssetCreatorComposer
  }
}
export type AssetCreatorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createAsset()void ABI method.
   *
  * This creates the asset that can be claimed
  once by any address.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAsset(params?: CallParams<AssetCreatorArgs['obj']['createAsset()void'] | AssetCreatorArgs['tuple']['createAsset()void']>): AssetCreatorComposer<[...TReturns, AssetCreatorReturns['createAsset()void'] | undefined]>

  /**
   * Calls the claimAsset()void ABI method.
   *
  * This method transfers and freezes one unit of the
  asset to the account that calls it.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimAsset(params?: CallParams<AssetCreatorArgs['obj']['claimAsset()void'] | AssetCreatorArgs['tuple']['claimAsset()void']>): AssetCreatorComposer<[...TReturns, AssetCreatorReturns['claimAsset()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AssetCreator smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AssetCreatorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AssetCreatorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AssetCreatorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AssetCreatorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AssetCreatorComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AssetCreatorComposerResults<TReturns>>
}
export type AssetCreatorComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

